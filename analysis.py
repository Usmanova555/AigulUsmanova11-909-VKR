# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ANVakmEs--ILuola6k3PZsQ9gVTM3ByK

## Код для предварительного анализа данных датасета
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import numpy as np
import pandas as pd

import plotly.express as px
import plotly.graph_objs as go

from datetime import date
from datetime import datetime, time

data = pd.read_csv('Table 1.csv')

data.head(5)

"""Типы данных"""

data.dtypes

"""### Количество уникальных данных по категориям"""

data.nunique()

data.set_index('order_id', inplace=True)

"""### Количество пустых ячеек"""

null_columns = data.columns[data.isnull().any()]
data[null_columns].isnull().sum()

n_unique_products = data['product_id'].nunique()
n_unique_users = data['user_id'].nunique()
print('Количество уникальных пользователей: ' + str(n_unique_users) +'. Количество уникальных продуков: ' + str(n_unique_products))

data['event_time']=pd.to_datetime(data['event_time'])

data.dropna(subset=['category_code'],inplace=True)

data['category'] = data['category_code'].str.rsplit('.', n=1, expand=True)[1]
data.drop(columns=['category_code'], inplace=True)

"""### ТОП-10 брендов приносящих наибольшую прибыль"""

best_performing_brands = data.groupby('brand')['price'].sum().reset_index().sort_values('price', ascending=False).head(10)
print(best_performing_brands)

"""### Самые продаваемые бренды"""

most_sold_brands = data.groupby('brand')['price'].agg('count').reset_index().sort_values('price', ascending=False).head(10)
most_sold_brands.rename(columns={"brand": "brand", "price": "times_sold"}, inplace=True)
print(most_sold_brands)

"""### Самые продаваемые категории товаров"""

most_sold_categories = data.groupby('category')['price'].agg('count').reset_index().sort_values('price', ascending=False).head(10)
most_sold_categories.rename(columns={"category": "category", "price": "times_sold"}, inplace=True)
print(most_sold_categories)

"""### В какое время было совершено наибольшее количество покупок"""

best_time = data.groupby(data['event_time'].dt.strftime('%r'))['price'].sum().sort_values()[lambda x: x<= 900000].tail(10)
print(best_time)

"""### Самый прибыльный и наименее прибыльный месяцы"""

best_month = data.groupby(data['event_time'].dt.strftime('%B'))['price'].sum().sort_values()
print(best_month)

"""### Время покупки пользователем и объем транзакций"""

user_purchase_time_GMV = data.groupby(data['event_time'].dt.strftime('%H'))['price'].sum().reset_index()
print(user_purchase_time_GMV)

"""### Процент данных, отсутствующих в каждом столбце"""

display(data.isna().sum()*100/data.shape[0])

"""### В какие месяцы происходили события"""

# На доработке
def get_month_year(timestamp):
    '''
    Read timestamp and return year-month
    '''
    try:
        # 2020-04-24 11:50:39 UTC
        ft = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S %Z')
        return datetime.strftime(ft, "%Y-%m")
    except:
        print('Could not process timestamp')
        return None

data['year_month'] = data['event_time'].apply(get_month_year)
data.year_month.unique()